{
  /*
    include 表示需要编译的ts文件
      ** 表示任意目录
      * 表示任意文件
   */
  "include": [
    "./src/**/*"
  ],
  /*
    exclude 排除指定目录，使其不参与编译
    默认为 ["node_modules","bower_components","jspm_packages]
  */
  "exclude": [
    "./src/c1-tsc/*"
  ],
  // 继承指定配置文件, 可选
  "extends": "./bashconfig.json",
  // 编译指定文件，与 includes 类似，files 是枚举需要编译的ts文件，include直接以通配方式组织需要编译文件
  "files": [
    "./src/c27-compile/compile.ts"
  ],
  "compilerOptions": {
    /* target 编译成指定版本类型js，默认为最老的es3，兼容浏览器更多
      'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'esnext'
    */
    "target": "es2017",
    /*  module 使用模块化规范，通常使用 es2015
      'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'esnext'
    */
    "module": "es2015",
    /*指定需要使用到的库，一般情况写使用默认就好,dom -> document
    'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl'
    */
    "lib": ["es2017","dom"],
    // 编译后js存储目录
    "outDir": "./dist",
    // 合并所有全局作用域代码,通常需要 module 为 amd 或 system
    //    "outFile": "./dist/app.js",
    // 是否允许将手写js代码一起编译到dist目录，默认为false
    "allowJs": true,
    // 手写js 是否也开启检查，默认为false
    "checkJs": false,
    // 编译后是否移除注释，默认false
    "removeComments": false,
    // 执行tsc 编译过程，但不生成js文件到dist目录下，默认false
    "noEmit": false,
    // 当有错误时不生成 编译文件到dist目录，通常需要开启checkJs，才能报错
    "noEmitOnError": false,

    // 所有严格检查总开关
    "strict": false,

    // 设置编译后的js使用严格模式"use struct"
    "alwaysStrict": false,
    // 设置不使用隐式any, 使用any 会导致ts 类型检查失效，存在隐患，显示不建议使用，隐式更加不推荐
    "noImplicitAny": false,
    /* 设置不使用隐式this,必须知道确定this是谁
      function add(){
        console.log(this) // 不确定this 是谁，会报错
      }
    */
    "noImplicitThis": false,
    /* 严格检查对象是否有为 null 可能性
    let box1 = document.getElementById("box1")
    // box1.addEventListener('click',function (){ // box1 可能为null,会报错
    //     alert('click')
    // })

    if (box1 != null) {
        box1.addEventListener('click', function () { // box1 可能为null,会报错
            alert('click')
        })
    }
    // 存在才调用，否则不调用
    box1?.addEventListener('click', function () { // box1 可能为null,会报错
        alert('click')
    })
    */
    "strictNullChecks": false,
  }
}